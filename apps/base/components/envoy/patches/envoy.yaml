apiVersion: apps/v1
kind: Deployment
metadata:
  name: not-important
spec:
  template:
    spec:
      initContainers:
        - name: ec2-metadata
          image: 370025973162.dkr.ecr.us-east-2.amazonaws.com/curlimages/curl:7.86.0
          imagePullPolicy: IfNotPresent
          command: [ '/bin/sh']
          args:
            - -c
            - |
              set -e
              curl -sS -f http://169.254.169.254/latest/meta-data/placement/availability-zone/ > /etc/ec2-metadata/availability-zone
              cat /etc/ec2-metadata/availability-zone | rev | cut -c2- | rev > /etc/ec2-metadata/region
              sed "s/NODE_IP/$NODE_IP/" /etc/envoy/envoy.yaml > /etc/ec2-metadata/envoy.yaml
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          volumeMounts:
            - name: ec2-metadata
              mountPath: /etc/ec2-metadata
            - name: envoy-config
              mountPath: "/etc/envoy"
              readOnly: true
      containers:
        - name: envoy
          image: 370025973162.dkr.ecr.us-east-2.amazonaws.com/envoy:v1.13.1-1
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash" ]
          resources:
            # To avoid unexpected throttling, increase limit for the moment
            limits:
              cpu: 500m
            requests:
              cpu: 100m
          args:
            - -c
            - |
              AZONE=$(cat /etc/ec2-metadata/availability-zone)
              REGION=$(cat /etc/ec2-metadata/region)
              exec envoy \
                --config-path /etc/ec2-metadata/envoy.yaml \
                --config-yaml "{node: {id: $ENVOY_NODE_ID, cluster: ${ENVOY_CLUSTER_NAME_ANNOTATION:=$ENVOY_CLUSTER_NAME}, locality: {region: $REGION, zone: $AZONE}}, stats_config: {stats_tags: [{tag_name: service, fixed_value: ${ENVOY_CLUSTER_NAME_ANNOTATION:=$ENVOY_CLUSTER_NAME}}]}}" \
                --parent-shutdown-time-s 15 --drain-time-s 10
          # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
          # https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
          # https://tubitv.atlassian.net/wiki/spaces/EC/pages/881328134/How+we+deploy+when+using+Envoy+and+problems+we+may+have
          # Container termination have the following steps:
          # > start termination -> preStop -> SIGTERM -> remove from Endpoints -> SIGKILL(after terminationGraceTime)
          # we need to fail envoy healthcheck to drain ingress connections first (SIGTERM will close listeners immediately),
          # and then wait for draining with http.ingress.downstream_cx_active stats.
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - -c
                  - "wget -qO- --post-data='' http://localhost:9901/healthcheck/fail && while [ $(curl -s localhost:9901/stats | grep 'http.ingress.downstream_cx_active: 0' | wc -l | xargs) -eq 0 ]; do sleep 1; done"
          env:
            - name: ENVOY_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ENVOY_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app']
            - name: ENVOY_CLUSTER_NAME_ANNOTATION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['control-plane-clustername']
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['environment']
          volumeMounts:
            - name: envoy-config
              mountPath: "/etc/envoy"
              readOnly: true
            - name: envoy-logs
              mountPath: /var/log/envoy
            - name: envoy-runtime
              mountPath: /srv/runtime/current
            - name: ec2-metadata
              mountPath: /etc/ec2-metadata
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-config
        - name: envoy-logs
          emptyDir: {}
        - name: envoy-runtime
          emptyDir: {}
        - name: ec2-metadata
          emptyDir: {}
